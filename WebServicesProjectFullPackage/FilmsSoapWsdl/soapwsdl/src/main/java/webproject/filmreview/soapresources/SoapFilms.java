
package webproject.filmreview.soapresources;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "SoapFilms", targetNamespace = "http://SoapResources.filmreview.webproject/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface SoapFilms {


    /**
     * 
     * @param tokenPojo
     * @param moviePojo
     * @return
     *     returns webproject.filmreview.soapresources.SoapResponse
     * @throws NotAuthorizedException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "AddMovie", action = "add_movie_soap")
    @WebResult(name = "SoapResponse", targetNamespace = "")
    @RequestWrapper(localName = "AddMovie", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.AddMovie")
    @ResponseWrapper(localName = "AddMovieResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.AddMovieResponse")
    @Action(input = "add_movie_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/AddMovieResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/AddMovie/Fault/InvalidInputException"),
        @FaultAction(className = NotAuthorizedException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/AddMovie/Fault/NotAuthorizedException")
    })
    public SoapResponse addMovie(
        @WebParam(name = "MoviePojo", targetNamespace = "")
        MoviePojo moviePojo,
        @WebParam(name = "TokenPojo", targetNamespace = "")
        TokenPojo tokenPojo)
        throws InvalidInputException_Exception, NotAuthorizedException_Exception
    ;

    /**
     * 
     * @param movieID
     * @return
     *     returns webproject.filmreview.soapresources.MoviePojo
     * @throws NotFoundException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "GetMovieById", action = "get_movie_byId_soap")
    @WebResult(name = "MoviePojo", targetNamespace = "")
    @RequestWrapper(localName = "GetMovieById", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetMovieById")
    @ResponseWrapper(localName = "GetMovieByIdResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetMovieByIdResponse")
    @Action(input = "get_movie_byId_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/GetMovieByIdResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/GetMovieById/Fault/InvalidInputException"),
        @FaultAction(className = NotFoundException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/GetMovieById/Fault/NotFoundException")
    })
    public MoviePojo getMovieById(
        @WebParam(name = "MovieID", targetNamespace = "")
        MovieID movieID)
        throws InvalidInputException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param filterModel
     * @return
     *     returns webproject.filmreview.soapresources.MoviesListPojo
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "GetAllMoviesFiltered", action = "get_all_movies_filtered_soap")
    @WebResult(name = "MoviesListPojo", targetNamespace = "")
    @RequestWrapper(localName = "GetAllMoviesFiltered", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetAllMoviesFiltered")
    @ResponseWrapper(localName = "GetAllMoviesFilteredResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetAllMoviesFilteredResponse")
    @Action(input = "get_all_movies_filtered_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/GetAllMoviesFilteredResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/GetAllMoviesFiltered/Fault/InvalidInputException")
    })
    public MoviesListPojo getAllMoviesFiltered(
        @WebParam(name = "FilterModel", targetNamespace = "")
        FilterModel filterModel)
        throws InvalidInputException_Exception
    ;

    /**
     * 
     * @param string
     * @return
     *     returns webproject.filmreview.soapresources.MoviePojo
     * @throws NotFoundException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "GetMovieByName", action = "get_movie_byName_soap")
    @WebResult(name = "MoviePojo", targetNamespace = "")
    @RequestWrapper(localName = "GetMovieByName", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetMovieByName")
    @ResponseWrapper(localName = "GetMovieByNameResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetMovieByNameResponse")
    @Action(input = "get_movie_byName_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/GetMovieByNameResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/GetMovieByName/Fault/InvalidInputException"),
        @FaultAction(className = NotFoundException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/GetMovieByName/Fault/NotFoundException")
    })
    public MoviePojo getMovieByName(
        @WebParam(name = "String", targetNamespace = "")
        String string)
        throws InvalidInputException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param tokenPojo
     * @param seriesPojo
     * @return
     *     returns webproject.filmreview.soapresources.SoapResponse
     * @throws NotAuthorizedException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "AddSeries", action = "add_series_soap")
    @WebResult(name = "SoapResponse", targetNamespace = "")
    @RequestWrapper(localName = "AddSeries", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.AddSeries")
    @ResponseWrapper(localName = "AddSeriesResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.AddSeriesResponse")
    @Action(input = "add_series_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/AddSeriesResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/AddSeries/Fault/InvalidInputException"),
        @FaultAction(className = NotAuthorizedException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/AddSeries/Fault/NotAuthorizedException")
    })
    public SoapResponse addSeries(
        @WebParam(name = "SeriesPojo", targetNamespace = "")
        SeriesPojo seriesPojo,
        @WebParam(name = "TokenPojo", targetNamespace = "")
        TokenPojo tokenPojo)
        throws InvalidInputException_Exception, NotAuthorizedException_Exception
    ;

    /**
     * 
     * @param tokenPojo
     * @param moviePojo
     * @return
     *     returns webproject.filmreview.soapresources.SoapResponse
     * @throws NotAuthorizedException_Exception
     * @throws NotFoundException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "UpdateMovie", action = "update_movie_soap")
    @WebResult(name = "SoapResponse", targetNamespace = "")
    @RequestWrapper(localName = "UpdateMovie", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.UpdateMovie")
    @ResponseWrapper(localName = "UpdateMovieResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.UpdateMovieResponse")
    @Action(input = "update_movie_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/UpdateMovieResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/UpdateMovie/Fault/InvalidInputException"),
        @FaultAction(className = NotFoundException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/UpdateMovie/Fault/NotFoundException"),
        @FaultAction(className = NotAuthorizedException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/UpdateMovie/Fault/NotAuthorizedException")
    })
    public SoapResponse updateMovie(
        @WebParam(name = "MoviePojo", targetNamespace = "")
        MoviePojo moviePojo,
        @WebParam(name = "TokenPojo", targetNamespace = "")
        TokenPojo tokenPojo)
        throws InvalidInputException_Exception, NotAuthorizedException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param tokenPojo
     * @param seriesPojo
     * @return
     *     returns webproject.filmreview.soapresources.SoapResponse
     * @throws NotAuthorizedException_Exception
     * @throws NotFoundException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "UpdateSeries", action = "update_series_soap")
    @WebResult(name = "SoapResponse", targetNamespace = "")
    @RequestWrapper(localName = "UpdateSeries", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.UpdateSeries")
    @ResponseWrapper(localName = "UpdateSeriesResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.UpdateSeriesResponse")
    @Action(input = "update_series_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/UpdateSeriesResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/UpdateSeries/Fault/InvalidInputException"),
        @FaultAction(className = NotFoundException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/UpdateSeries/Fault/NotFoundException"),
        @FaultAction(className = NotAuthorizedException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/UpdateSeries/Fault/NotAuthorizedException")
    })
    public SoapResponse updateSeries(
        @WebParam(name = "SeriesPojo", targetNamespace = "")
        SeriesPojo seriesPojo,
        @WebParam(name = "TokenPojo", targetNamespace = "")
        TokenPojo tokenPojo)
        throws InvalidInputException_Exception, NotAuthorizedException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param tokenPojo
     * @param movieID
     * @return
     *     returns webproject.filmreview.soapresources.SoapResponse
     * @throws NotAuthorizedException_Exception
     * @throws NotFoundException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "DeleteMovie", action = "delete_movie_soap")
    @WebResult(name = "SoapResponse", targetNamespace = "")
    @RequestWrapper(localName = "DeleteMovie", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.DeleteMovie")
    @ResponseWrapper(localName = "DeleteMovieResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.DeleteMovieResponse")
    @Action(input = "delete_movie_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/DeleteMovieResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/DeleteMovie/Fault/InvalidInputException"),
        @FaultAction(className = NotFoundException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/DeleteMovie/Fault/NotFoundException"),
        @FaultAction(className = NotAuthorizedException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/DeleteMovie/Fault/NotAuthorizedException")
    })
    public SoapResponse deleteMovie(
        @WebParam(name = "MovieID", targetNamespace = "")
        MovieID movieID,
        @WebParam(name = "TokenPojo", targetNamespace = "")
        TokenPojo tokenPojo)
        throws InvalidInputException_Exception, NotAuthorizedException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param tokenPojo
     * @param seriesID
     * @return
     *     returns webproject.filmreview.soapresources.SoapResponse
     * @throws NotAuthorizedException_Exception
     * @throws NotFoundException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "DeleteSeries", action = "delete_series_soap")
    @WebResult(name = "SoapResponse", targetNamespace = "")
    @RequestWrapper(localName = "DeleteSeries", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.DeleteSeries")
    @ResponseWrapper(localName = "DeleteSeriesResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.DeleteSeriesResponse")
    @Action(input = "delete_series_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/DeleteSeriesResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/DeleteSeries/Fault/InvalidInputException"),
        @FaultAction(className = NotFoundException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/DeleteSeries/Fault/NotFoundException"),
        @FaultAction(className = NotAuthorizedException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/DeleteSeries/Fault/NotAuthorizedException")
    })
    public SoapResponse deleteSeries(
        @WebParam(name = "SeriesID", targetNamespace = "")
        SeriesID seriesID,
        @WebParam(name = "TokenPojo", targetNamespace = "")
        TokenPojo tokenPojo)
        throws InvalidInputException_Exception, NotAuthorizedException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param string
     * @return
     *     returns webproject.filmreview.soapresources.SeriesPojo
     * @throws NotFoundException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "GetSeriesByName", action = "get_series_byName_soap")
    @WebResult(name = "SeriesPojo", targetNamespace = "")
    @RequestWrapper(localName = "GetSeriesByName", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetSeriesByName")
    @ResponseWrapper(localName = "GetSeriesByNameResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetSeriesByNameResponse")
    @Action(input = "get_series_byName_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/GetSeriesByNameResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/GetSeriesByName/Fault/InvalidInputException"),
        @FaultAction(className = NotFoundException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/GetSeriesByName/Fault/NotFoundException")
    })
    public SeriesPojo getSeriesByName(
        @WebParam(name = "String", targetNamespace = "")
        String string)
        throws InvalidInputException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param filterModel
     * @return
     *     returns webproject.filmreview.soapresources.SeriesListPojo
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "GetAllSeriesFiltered", action = "get_all_series_filtered_soap")
    @WebResult(name = "SeriesListPojo", targetNamespace = "")
    @RequestWrapper(localName = "GetAllSeriesFiltered", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetAllSeriesFiltered")
    @ResponseWrapper(localName = "GetAllSeriesFilteredResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetAllSeriesFilteredResponse")
    @Action(input = "get_all_series_filtered_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/GetAllSeriesFilteredResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/GetAllSeriesFiltered/Fault/InvalidInputException")
    })
    public SeriesListPojo getAllSeriesFiltered(
        @WebParam(name = "FilterModel", targetNamespace = "")
        FilterModel filterModel)
        throws InvalidInputException_Exception
    ;

    /**
     * 
     * @param tokenPojo
     * @param seasonPojo
     * @param seriesID
     * @return
     *     returns webproject.filmreview.soapresources.SoapResponse
     * @throws NotAuthorizedException_Exception
     * @throws NotFoundException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "UpdateSeasonOfSeries", action = "update_season_of_series_soap")
    @WebResult(name = "SoapResponse", targetNamespace = "")
    @RequestWrapper(localName = "UpdateSeasonOfSeries", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.UpdateSeasonOfSeries")
    @ResponseWrapper(localName = "UpdateSeasonOfSeriesResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.UpdateSeasonOfSeriesResponse")
    @Action(input = "update_season_of_series_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/UpdateSeasonOfSeriesResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/UpdateSeasonOfSeries/Fault/InvalidInputException"),
        @FaultAction(className = NotFoundException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/UpdateSeasonOfSeries/Fault/NotFoundException"),
        @FaultAction(className = NotAuthorizedException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/UpdateSeasonOfSeries/Fault/NotAuthorizedException")
    })
    public SoapResponse updateSeasonOfSeries(
        @WebParam(name = "SeriesID", targetNamespace = "")
        SeriesID seriesID,
        @WebParam(name = "SeasonPojo", targetNamespace = "")
        SeasonPojo seasonPojo,
        @WebParam(name = "TokenPojo", targetNamespace = "")
        TokenPojo tokenPojo)
        throws InvalidInputException_Exception, NotAuthorizedException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param seriesID
     * @return
     *     returns webproject.filmreview.soapresources.SeriesPojo
     * @throws NotFoundException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "GetSeriesById", action = "get_series_byId_soap")
    @WebResult(name = "SeriesPojo", targetNamespace = "")
    @RequestWrapper(localName = "GetSeriesById", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetSeriesById")
    @ResponseWrapper(localName = "GetSeriesByIdResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetSeriesByIdResponse")
    @Action(input = "get_series_byId_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/GetSeriesByIdResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/GetSeriesById/Fault/InvalidInputException"),
        @FaultAction(className = NotFoundException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/GetSeriesById/Fault/NotFoundException")
    })
    public SeriesPojo getSeriesById(
        @WebParam(name = "SeriesID", targetNamespace = "")
        SeriesID seriesID)
        throws InvalidInputException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param tokenPojo
     * @param seasonID
     * @param seriesID
     * @return
     *     returns webproject.filmreview.soapresources.SoapResponse
     * @throws NotAuthorizedException_Exception
     * @throws NotFoundException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "DeleteSeasonOfSeries", action = "delete_season_of_series_soap")
    @WebResult(name = "SoapResponse", targetNamespace = "")
    @RequestWrapper(localName = "DeleteSeasonOfSeries", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.DeleteSeasonOfSeries")
    @ResponseWrapper(localName = "DeleteSeasonOfSeriesResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.DeleteSeasonOfSeriesResponse")
    @Action(input = "delete_season_of_series_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/DeleteSeasonOfSeriesResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/DeleteSeasonOfSeries/Fault/InvalidInputException"),
        @FaultAction(className = NotFoundException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/DeleteSeasonOfSeries/Fault/NotFoundException"),
        @FaultAction(className = NotAuthorizedException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/DeleteSeasonOfSeries/Fault/NotAuthorizedException")
    })
    public SoapResponse deleteSeasonOfSeries(
        @WebParam(name = "SeriesID", targetNamespace = "")
        SeriesID seriesID,
        @WebParam(name = "SeasonID", targetNamespace = "")
        SeasonID seasonID,
        @WebParam(name = "TokenPojo", targetNamespace = "")
        TokenPojo tokenPojo)
        throws InvalidInputException_Exception, NotAuthorizedException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param tokenPojo
     * @param seasonPojo
     * @param seriesID
     * @return
     *     returns webproject.filmreview.soapresources.SoapResponse
     * @throws NotAuthorizedException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "PostSeasonToSeries", action = "post_season_to_series_soap")
    @WebResult(name = "SoapResponse", targetNamespace = "")
    @RequestWrapper(localName = "PostSeasonToSeries", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.PostSeasonToSeries")
    @ResponseWrapper(localName = "PostSeasonToSeriesResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.PostSeasonToSeriesResponse")
    @Action(input = "post_season_to_series_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/PostSeasonToSeriesResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/PostSeasonToSeries/Fault/InvalidInputException"),
        @FaultAction(className = NotAuthorizedException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/PostSeasonToSeries/Fault/NotAuthorizedException")
    })
    public SoapResponse postSeasonToSeries(
        @WebParam(name = "SeriesID", targetNamespace = "")
        SeriesID seriesID,
        @WebParam(name = "SeasonPojo", targetNamespace = "")
        SeasonPojo seasonPojo,
        @WebParam(name = "TokenPojo", targetNamespace = "")
        TokenPojo tokenPojo)
        throws InvalidInputException_Exception, NotAuthorizedException_Exception
    ;

    /**
     * 
     * @return
     *     returns webproject.filmreview.soapresources.SeriesListPojo
     */
    @WebMethod(operationName = "GetAllSeries", action = "get_all_series_soap")
    @WebResult(name = "SeriesListPojo", targetNamespace = "")
    @RequestWrapper(localName = "GetAllSeries", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetAllSeries")
    @ResponseWrapper(localName = "GetAllSeriesResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetAllSeriesResponse")
    @Action(input = "get_all_series_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/GetAllSeriesResponse")
    public SeriesListPojo getAllSeries();

    /**
     * 
     * @param seasonID
     * @param seriesID
     * @return
     *     returns webproject.filmreview.soapresources.SeasonPojo
     * @throws NotFoundException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "GetSeasonById", action = "get_season_byId_soap")
    @WebResult(name = "SeasonPojo", targetNamespace = "")
    @RequestWrapper(localName = "GetSeasonById", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetSeasonById")
    @ResponseWrapper(localName = "GetSeasonByIdResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetSeasonByIdResponse")
    @Action(input = "get_season_byId_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/GetSeasonByIdResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/GetSeasonById/Fault/InvalidInputException"),
        @FaultAction(className = NotFoundException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/GetSeasonById/Fault/NotFoundException")
    })
    public SeasonPojo getSeasonById(
        @WebParam(name = "SeriesID", targetNamespace = "")
        SeriesID seriesID,
        @WebParam(name = "SeasonID", targetNamespace = "")
        SeasonID seasonID)
        throws InvalidInputException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param seasonID
     * @param episodeID
     * @param seriesID
     * @return
     *     returns webproject.filmreview.soapresources.EpisodePojo
     * @throws NotFoundException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "GetEpisodeById", action = "get_episode_byId_soap")
    @WebResult(name = "EpisodePojo", targetNamespace = "")
    @RequestWrapper(localName = "GetEpisodeById", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetEpisodeById")
    @ResponseWrapper(localName = "GetEpisodeByIdResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetEpisodeByIdResponse")
    @Action(input = "get_episode_byId_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/GetEpisodeByIdResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/GetEpisodeById/Fault/InvalidInputException"),
        @FaultAction(className = NotFoundException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/GetEpisodeById/Fault/NotFoundException")
    })
    public EpisodePojo getEpisodeById(
        @WebParam(name = "SeriesID", targetNamespace = "")
        SeriesID seriesID,
        @WebParam(name = "SeasonID", targetNamespace = "")
        SeasonID seasonID,
        @WebParam(name = "EpisodeID", targetNamespace = "")
        EpisodeID episodeID)
        throws InvalidInputException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param tokenPojo
     * @param seasonID
     * @param episodePojo
     * @param seriesID
     * @return
     *     returns webproject.filmreview.soapresources.SoapResponse
     * @throws NotAuthorizedException_Exception
     * @throws NotFoundException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "UpdateEpisode", action = "update_episode_ofSeason_soap")
    @WebResult(name = "SoapResponse", targetNamespace = "")
    @RequestWrapper(localName = "UpdateEpisode", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.UpdateEpisode")
    @ResponseWrapper(localName = "UpdateEpisodeResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.UpdateEpisodeResponse")
    @Action(input = "update_episode_ofSeason_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/UpdateEpisodeResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/UpdateEpisode/Fault/InvalidInputException"),
        @FaultAction(className = NotFoundException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/UpdateEpisode/Fault/NotFoundException"),
        @FaultAction(className = NotAuthorizedException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/UpdateEpisode/Fault/NotAuthorizedException")
    })
    public SoapResponse updateEpisode(
        @WebParam(name = "SeriesID", targetNamespace = "")
        SeriesID seriesID,
        @WebParam(name = "SeasonID", targetNamespace = "")
        SeasonID seasonID,
        @WebParam(name = "EpisodePojo", targetNamespace = "")
        EpisodePojo episodePojo,
        @WebParam(name = "TokenPojo", targetNamespace = "")
        TokenPojo tokenPojo)
        throws InvalidInputException_Exception, NotAuthorizedException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param tokenPojo
     * @param seasonID
     * @param episodePojo
     * @param seriesID
     * @return
     *     returns webproject.filmreview.soapresources.SoapResponse
     * @throws NotAuthorizedException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "PostEpisode", action = "post_episode_toSeason_soap")
    @WebResult(name = "SoapResponse", targetNamespace = "")
    @RequestWrapper(localName = "PostEpisode", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.PostEpisode")
    @ResponseWrapper(localName = "PostEpisodeResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.PostEpisodeResponse")
    @Action(input = "post_episode_toSeason_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/PostEpisodeResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/PostEpisode/Fault/InvalidInputException"),
        @FaultAction(className = NotAuthorizedException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/PostEpisode/Fault/NotAuthorizedException")
    })
    public SoapResponse postEpisode(
        @WebParam(name = "SeriesID", targetNamespace = "")
        SeriesID seriesID,
        @WebParam(name = "SeasonID", targetNamespace = "")
        SeasonID seasonID,
        @WebParam(name = "EpisodePojo", targetNamespace = "")
        EpisodePojo episodePojo,
        @WebParam(name = "TokenPojo", targetNamespace = "")
        TokenPojo tokenPojo)
        throws InvalidInputException_Exception, NotAuthorizedException_Exception
    ;

    /**
     * 
     * @param tokenPojo
     * @param seasonID
     * @param episodeID
     * @param seriesID
     * @return
     *     returns webproject.filmreview.soapresources.SoapResponse
     * @throws NotAuthorizedException_Exception
     * @throws NotFoundException_Exception
     * @throws InvalidInputException_Exception
     */
    @WebMethod(operationName = "DeleteEpisode", action = "delete_episode_soap")
    @WebResult(name = "SoapResponse", targetNamespace = "")
    @RequestWrapper(localName = "DeleteEpisode", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.DeleteEpisode")
    @ResponseWrapper(localName = "DeleteEpisodeResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.DeleteEpisodeResponse")
    @Action(input = "delete_episode_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/DeleteEpisodeResponse", fault = {
        @FaultAction(className = InvalidInputException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/DeleteEpisode/Fault/InvalidInputException"),
        @FaultAction(className = NotFoundException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/DeleteEpisode/Fault/NotFoundException"),
        @FaultAction(className = NotAuthorizedException_Exception.class, value = "http://SoapResources.filmreview.webproject/SoapFilms/DeleteEpisode/Fault/NotAuthorizedException")
    })
    public SoapResponse deleteEpisode(
        @WebParam(name = "SeriesID", targetNamespace = "")
        SeriesID seriesID,
        @WebParam(name = "SeasonID", targetNamespace = "")
        SeasonID seasonID,
        @WebParam(name = "EpisodeID", targetNamespace = "")
        EpisodeID episodeID,
        @WebParam(name = "TokenPojo", targetNamespace = "")
        TokenPojo tokenPojo)
        throws InvalidInputException_Exception, NotAuthorizedException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @return
     *     returns webproject.filmreview.soapresources.MoviesListPojo
     */
    @WebMethod(operationName = "GetAllMovies", action = "get_all_movies_soap")
    @WebResult(name = "MoviesListPojo", targetNamespace = "")
    @RequestWrapper(localName = "GetAllMovies", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetAllMovies")
    @ResponseWrapper(localName = "GetAllMoviesResponse", targetNamespace = "http://SoapResources.filmreview.webproject/", className = "webproject.filmreview.soapresources.GetAllMoviesResponse")
    @Action(input = "get_all_movies_soap", output = "http://SoapResources.filmreview.webproject/SoapFilms/GetAllMoviesResponse")
    public MoviesListPojo getAllMovies();

}
